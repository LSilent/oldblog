%title VIM - 高效强悍的编辑器

![vim-logo](http://farm9.staticflickr.com/8319/8058781267_bfe4f65ce6_m.jpg)
![vim-hit9](http://farm9.staticflickr.com/8032/8058828833_8b95a52a3a_z.jpg)

现在我是一名大二的学生,在使用[VIM](http://www.vim.org/). 前两天有同学在人人上求教Vim, 其实,我也刚入门.

hit9很喜欢vim, 包括这篇文章也是用[vimwiki](http://code.google.com/p/vimwiki/)写的.(注:初始版本用的vimwiki写的,现在使用的mkdwiki)

我希望当代走在编程之路上的年轻人应该了解vim和[emacs](http://www.gnu.org/software/emacs/),了解linux,git,ssh,python,ruby这些非常cool的东西.

[TOC]

## 1.所谓Vim

程序员们说:编辑器有三种,vim,emacs和其他编辑器.(还记得社交网络里面,扎克伯格用的就是emacs)

hit9无意挑起编辑器之战,客观来说,的确很多人爱vim.

所谓vim即VI Improved,只是个编辑器而已.

希望你在linux下使用vim.vim可以让你编程序得时候摆脱鼠标(我们为何摆脱鼠标?这是热衷IDE的人无法理解的!).跟Linux万能的终端配合起来妙极了.

如果你离不开windows,那不如去使用[SublimeText2](http://www.sublimetext.com/)或者[Notepad++](http://notepad-plus-plus.org/)

另外澄清:gvim != vim 

## 2.为何不是IDE

vim 是个编辑器,而绝非IDE(Integrated development environment). 编辑器只负责编辑code,不负责项目管理(当然vim也有这种插件),不负责编译和运行.

著名的IDE有eclipse,netbeans,codeblock,vs等,但我强烈建议你丢掉这些东西!

hit9只陈列几个自己不喜欢IDE而喜欢编辑器的理由:

1. 编辑器轻巧(快速而短小)
1. 编辑器随心所欲,可配制性高.
1. 尤其对于C\C++编译型语言,手工编译大有脾益
1. 不喜欢用鼠标点来点去的UI交互方式和我的code打交道,更喜欢用命令行. 

觉得VIM很装X? 谁用谁知道. 

## 3.开始编辑

### 1.简单编辑
下载vim后(其实大部分linux发行版会自带vim),终端输入vim,进入后会发现你输不进去东西

按下i或者a,会进入插入模式(-- INSERT --),这时就可以输入东西了.

怎么保存并退出呢?

按下ESC键,进入正常模式.(无论什么时候按下ESC都会进入正常模式)

按下:后,会看到vim最下方会有个输入条,这是命令模式,输入w意指保存,输入q意指退出.更快些,输入wq是保存并退出.

如果未保存直接退出,vim会提醒你:加上!强行退出即`:q! `


### 2.移动光标

当然可以尝试用方向键来移动了.更vimic得方式是:hjkl

h和l :向左和向右 ; j和k:向下和向上 (既然你能熟悉射击游戏中的wasd,为何不能习惯hjkl呢!) 

### 3.撤销操作

ESC进入普通模式下按下u可撤销操作.

命令模式下:u 或者:undo也是撤销 

### 4.更快的定位光标:

有没有在coding的时候不停的按左右键定位到你想要的位置的经历

**普通模式下**:

1. w -从当前光标当前位置跳到单字/单词末尾，包括空格(接连着摁w会更快得找到要编辑的单词!)
* $ – 从当前光标当前位置跳到当前行末(当然你也可以使用end键)
* ^ - 从当前光标当前位置跳到行首 

**命令模式下**:

1. :n - 跳到第n行
* :$ - 跳到最后一行
* :1 - 跳到第一行(跟:n一个道理) 

### 5.更快的编辑:

**普通模式下**:

1. dd - 快速删除一行
* yy - 快速复制一行
* p - 粘贴
* r - 单个字符替换(replace) 

**命令模式下**:

1. m,nd - 快速删除第m到第n行 (delete)
1. m,ny - 复制第m到第n行 (yank)
1. m,nmt - 第m行到第n行剪切到第t行(move)
1. m,ncot -第m行到第n行复制到第t行 

**搜索单词**:

向下搜索字符串: 普通模式下按下/ 会看到左下角有个以/开头的输入条,输入你想查找的单词回车即可 

向上搜索字符串: 普通模式下按下? 

对齐: 你得代码看上去很乱? 在普通模式下,连按两次=键使当前行对齐.按gg=G对齐整个正在编辑的文档

## 4.让VIM更cool一点

比如,我们coding时喜欢显示行号:命令模式下`:set nu `或者 `:set number `
  
比如,我们想换个皮肤(比如desert):命令模式下`:colorscheme desert`

vim有一个配置文件(~/.vimrc),我们可以把配置写进配置文件中,这样vim就会在启动后记住你得配置.否则你在命令模式下所有得配置都是瞬时的.

建议vim得配置放在.vimrc中,gvim的配置放在.gvimrc中(比如配色,字体)

一个配置文件: 

```python
" Vim会自动检测到你的文件类型并为之载入相应的语法高亮.
syntax enable
" 开启语法识别
syntax on
"开启256分辨率,终端更好看
set t_Co=256
"配色方案,solarized很好看,可以google一下
colorscheme solarized
"如果你更喜欢不同语法下显示不同皮肤,比如我更喜欢写python时使用清爽的peachpuff
autocmd Syntax python colorscheme peachpuff
"配色背景dark,另一个选择是set background=light
set background=dark
"此项不会解释..但它会让vim在终端保持透明
hi Normal ctermbg=NONE
"设置gui下的字体Inconsolata-g, 字体大小12号,还可以这么写set guifont=Inconsolata-g\ 12
set guifont=Inconsolata-g:h12
"在Vim窗口的右下角显示一个完整的命令已经完成的部分
set showcmd
"编码,建议强制使用utf8
set encoding=utf-8
"告诉 vim，打开一个文件时,尝试 utf8,gbk..这几种编码
set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbkgb2312,cp936
"终端编码
set termencoding=utf-8
"用utf8编码打开文件
set fileencoding=utf-8
"关闭错误的时候发出声音
set noeb
"自动缩进
set autoindent
"按照C语言的语法，自动地调整缩进的长度
set cindent
"智能缩进:每一行都和前一行有相同的缩进量,
"同时这种缩进形式能正确的识别出花括号,当遇到右花括号（}）,
"则取消缩进形式。此外还增加了识别C语言关键字的功能。
"如果一行是以#开头的(比如宏)，那么这种格式将会被特殊对待而不采用缩进格式
set smartindent
"文件中一个 <Tab> 占据的空格数
set tabstop=4
"一开始,插入的就是4个空格,此时一旦你再按下一次tab,这次的四个空格就会和上次的四个空格组合起来变成一个制表符
set softtabstop=4
"每一级自动缩进的空格数
set shiftwidth=4
"显示行号,关闭行号显示是set nonu
set number
"启用鼠标的使用
set mouse=a
"可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位）
set selection=exclusive
set selectmode=mouse,key
"代码折叠
set foldenable
"手动折叠
set foldmethod=manual
set foldlevel=3
"高亮显示匹配的括号
set showmatch
"匹配括号高亮的时间（单位是十分之一秒）
set matchtime=1
"代码补全
set completeopt=preview,menu
set autoread
set cpt=.,w,b
set guioptions-=T           " gvim隐藏工具栏
set guioptions-=m           " gvim隐藏菜单栏
filetype indent on           " 针对不同的文件类型采用不同的缩进格式
filetype plugin on           " 针对不同的文件类型加载对应的插件
filetype plugin indent on    " 启用自动补全
:command -range=% R :call Runit() "自定义命令:R,运行:R命令会执行函数Runit()
:command -range=% RP : call RunProject() "自定义命令:RP,编译C project(多个源文件)
func! RunProject()  "C多个源文件编译函数
    exec "w" 
    if &filetype == 'c'
        exec "!gcc *.c -o %<"
        exec "! ./%<"
    endif
endfunc
func! Runit()    "函数,根据不同的语言类型保存,编译,执行当前编辑文件
     exec "w"
     if &filetype == 'c'
        exec "!gcc  % -o %<"
        exec "! ./%<"
    elseif &filetype == 'cpp'
        exec "!g++ % -o %<"  
        exec "! ./%<"
    elseif &filetype == 'java'
        exec "!javac %"
        exec "!java %<"
    elseif &filetype == 'sql'
        exec "w !mysql -uroot -ppasswd wc_test -t"
        :%s/^/--
    elseif &filetype == 'php'
        exec "!php %"
    elseif &filetype =='python'
        exec "!python2 %"
    elseif &filetype=='ruby'
        exec "!ruby %"
    elseif &filetype=='javascript'
        exec "!js %"
    elseif &filetype=='vimwiki'
        exec "Vimwiki2HTML"
    elseif &filetype=='sh'
        exec "!sh %"
    endif
endfunc
"映射ctrl+c和ctrl+v键为copy到系统剪贴板和从系统剪切板粘贴
map <C-c> "+y 
map <C-v> "+p
autocmd Syntax python set list  "由于python中缩进很关键,所以对于python显示缩进
autocmd Syntax python set listchars=tab:\-\-    "缩进符
:command -range=% C : call Tinyc()   "C编程的时候使用tcc编译器快速测试
func! Tinyc()
    exec "w"
    if &filetype == 'c'
        exec "!tcc -run %"
    endif
endfunc
"告诉vim使用vim的键盘而不是vi的
set nocompatible
"关闭启动时的救助贫困儿童的提示消息
set shortmess=atI
```

配置好你的vimrc后是不是觉得舒服多了,VIM也瞬间Cool了起来!

最基本的呢

1. 选一个你喜欢的字体,比如Inconsolata-g,monospace ...
2. 选一个你喜欢的colorscheme . 比如这里http://vimcolorschemetest.googlecode.com/svn/html/index-c.html , 而且极力推荐一个配色:solarized
3. 显示行号 `set nu` ,开启缩进 `set autoindent ,set cindent, set smartindent`

##5.VIM强大丰富的插件

编辑器的强大之处不止在于它是高可配的,还在于它强大的扩展功能.就像wordpress一样,就像firefox一样,vim的插件解放了很多coder,不必再自己去写脚本配置vim了,而是可以取它山之石.

这里推荐几个插件: 

1. 推荐的第一个插件是[Vundle](https://github.com/gmarik/vundle) ,一个vim管理插件,它帮你管理你的vim插件,这样就会快速的安装和卸载你的vim插件了.而不至于使你的vim变得很臃肿. [Vundle的wiki](http://adam8157.info/blog/2011/12/use-vundle-to-manage-vim-plugins)
1. [snipmate](http://www.vim.org/scripts/script.php?script_id=2540) 超级棒的代码片段补全插件.有了它你写代码会很快 [介绍](http://www.hit9.net/archives/4596)
1. [neocomplcache](http://www.vim.org/scripts/script.php?script_id=2620) 速度很快的自动完成插件.速度还是很不错的,最起码没觉得卡.[wiki](http://www.cnblogs.com/likeyu/archive/2012/03/24/2415070.html)
1. [ScrollColors](http://www.vim.org/scripts/script.php?script_id=1488) 一个遍历你的配色方案的插件.我们就可以快速的给vim换身衣服了!
1. [vimwiki](http://code.google.com/p/vimwiki/) 不得不提的插件,我觉得使用它写html不比markdown慢.一个vim wiki插件.[相关wiki](http://wiki.ktmud.com/tips/vim/vimwiki-guide.html)
1. [autoclose](http://www.vim.org/scripts/script.php?script_id=1849) 一个自动关闭括号的插件.你是否喜欢这样coding的感觉:写C的时候,写一个(,编辑器会自动把括号合上,并把光标置中.{ 也会自动关闭并把光标置中(还会换行呢).比较头疼的是怎么区别对待ruby和html中的大括号(解决方案是使用`autocmd Syntax ruby,html,wiki,python inoremap { {}<ESC>i`)
1. [NERD tree](http://www.vim.org/scripts/script.php?script_id=1658) 可以随时把你所在文件的目录列表给你打开-一个文件浏览插件 [wiki ](http://www.clovery.org/tree-explorer-plugin-nerdtree-for-vim.html)

vim 拥有众多的各式各样的插件,甚至有让vim发weibo的,用vim写博客的,用vim做音乐播放器,用vim Google搜索的...

其实,hit9蛮关心有没有一个实现minimap的插件(SublimeText2中极具特色的功能)

插件不在多,选几个自己喜欢的和适合自己的 

## 6.一些不错的教程

1. [VIM实用技术](http://www.ibm.com/developerworks/cn/linux/l-tip-vim1/index.html)
1. [神奇的VIM](http://www.ibm.com/developerworks/cn/linux/l-tip-prompt/tip15/)
1. [善用佳软-vim](http://xbeta.info/tag/gvim)
1. [Graphical vi-vim Cheat Sheet and Tutorial](http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html)
1. [我这样使用vim](http://xbeta.info/my-gvim.htm)

## 7.让自己更VIM些,使用vimlike的浏览器

1. Firefox中有[vimperator](https://addons.mozilla.org/en-US/firefox/addon/vimperator/)和[Pentadacty](http://xbeta.info/vimperator.htm)

1. chrome(chromium)中有[Vrome](https://chrome.google.com/webstore/detail/godjoomfiimiddapohpmfklhgmbfffjj)和[Vimium](https://chrome.google.com/webstore/detail/dbepggeogbaibhgnhhndojpepiihcmeb?utm_source=chrome-ntp-icon) 

**最后祝愿你在VIM之旅上如鱼得水!**
